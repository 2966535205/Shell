package com.wangyz.plugins.util;

import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;

import java.io.File;

import static org.objectweb.asm.Opcodes.AALOAD;
import static org.objectweb.asm.Opcodes.ACC_FINAL;
import static org.objectweb.asm.Opcodes.ACC_PRIVATE;
import static org.objectweb.asm.Opcodes.ACC_PUBLIC;
import static org.objectweb.asm.Opcodes.ACC_STATIC;
import static org.objectweb.asm.Opcodes.ACC_SUPER;
import static org.objectweb.asm.Opcodes.ACONST_NULL;
import static org.objectweb.asm.Opcodes.ALOAD;
import static org.objectweb.asm.Opcodes.ARETURN;
import static org.objectweb.asm.Opcodes.ARRAYLENGTH;
import static org.objectweb.asm.Opcodes.ASTORE;
import static org.objectweb.asm.Opcodes.ATHROW;
import static org.objectweb.asm.Opcodes.BALOAD;
import static org.objectweb.asm.Opcodes.BASTORE;
import static org.objectweb.asm.Opcodes.BIPUSH;
import static org.objectweb.asm.Opcodes.CHECKCAST;
import static org.objectweb.asm.Opcodes.DUP;
import static org.objectweb.asm.Opcodes.DUP2;
import static org.objectweb.asm.Opcodes.GETFIELD;
import static org.objectweb.asm.Opcodes.GOTO;
import static org.objectweb.asm.Opcodes.I2B;
import static org.objectweb.asm.Opcodes.IADD;
import static org.objectweb.asm.Opcodes.ICONST_0;
import static org.objectweb.asm.Opcodes.ICONST_1;
import static org.objectweb.asm.Opcodes.ICONST_M1;
import static org.objectweb.asm.Opcodes.IFEQ;
import static org.objectweb.asm.Opcodes.IFNE;
import static org.objectweb.asm.Opcodes.IFNULL;
import static org.objectweb.asm.Opcodes.IF_ICMPEQ;
import static org.objectweb.asm.Opcodes.IF_ICMPGE;
import static org.objectweb.asm.Opcodes.IF_ICMPLE;
import static org.objectweb.asm.Opcodes.ILOAD;
import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;
import static org.objectweb.asm.Opcodes.INVOKESPECIAL;
import static org.objectweb.asm.Opcodes.INVOKESTATIC;
import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;
import static org.objectweb.asm.Opcodes.IRETURN;
import static org.objectweb.asm.Opcodes.ISTORE;
import static org.objectweb.asm.Opcodes.IXOR;
import static org.objectweb.asm.Opcodes.NEW;
import static org.objectweb.asm.Opcodes.NEWARRAY;
import static org.objectweb.asm.Opcodes.POP;
import static org.objectweb.asm.Opcodes.RETURN;
import static org.objectweb.asm.Opcodes.SIPUSH;
import static org.objectweb.asm.Opcodes.T_BYTE;
import static org.objectweb.asm.Opcodes.V1_7;
import static org.objectweb.asm.Opcodes.V1_8;

/**
 * @author wangyz
 */
public class ShellUtil {

    /**
     * shell
     *
     * @param apk
     * @param aar
     * @param root
     * @param keystore
     * @param keyStorePassword
     * @param keyPassword
     * @param alias
     */
    public static void shell(String apk, String aar, String root, String keystore, String keyStorePassword, String keyPassword, String alias) {
        try {
            // APK
            File apkFile = new File(apk);
            // shell AAR
            File shellFile = new File(aar);
            // if file not exist,return
            if (!apkFile.exists() || !shellFile.exists()) {
                System.out.println("apkFile or shellFile missing");
                return;
            }

            // *************unZip APK*************
            System.out.println("unzip APK");
            // delete old outputs
            File outputDir = new File(root, "/outputs/");
            if (outputDir.exists()) {
                FileUtil.deleteAllInDir(outputDir);
            }
            // create unzip dir for apk
            File apkUnzipDir = new File(root, "/outputs/unzip/apk/");
            if (!apkUnzipDir.exists()) {
                apkUnzipDir.mkdirs();
            }
            // unZip APK
            ZipUtil.unZip(apkFile, apkUnzipDir);
            // get dex
            File[] apkFiles = apkUnzipDir.listFiles((file, s) -> s.endsWith(".dex"));
            for (int i = apkFiles.length - 1; i >= 0; i--) {
                File file = apkFiles[i];
                String name = file.getName();
                System.out.println("dex:" + name);
                String bakName = name.substring(0, name.indexOf(".dex")) + "_bak.dex";
                System.out.println("bak dex:" + bakName);
                bakName = file.getParent() + File.separator + name.substring(0, name.indexOf(".dex")) + "_bak.dex";

                // encrypt dex
                EncryptUtil.encrypt(file.getAbsolutePath(), bakName);
                System.out.println("encrypt dex:" + name);
                // delete old file
                file.delete();
            }
            // *************unZip APK*************

            // *************unZip shell AAR*************
            // create unZip dir for shell
            System.out.println("unzip shell AAR");
            File shellUnzipDir = new File(root, "/outputs/unzip/shell/");
            if (!shellUnzipDir.exists()) {
                shellUnzipDir.mkdirs();
            }
            // unZip AAR
            ZipUtil.unZip(shellFile, shellUnzipDir);
            // convert jar to dex
            System.out.println("convert jar to dex");
            File shellJar = new File(shellUnzipDir, "classes.jar");
            File shellDex = new File(apkUnzipDir, "classes.dex");
            DexUtil.dxCommand(shellJar, shellDex);
            // pack
            System.out.println("pack APK");
            File unsignedApk = new File(root, "/outputs/unsigned.apk");
            ZipUtil.zip(apkUnzipDir, unsignedApk);
            // delete unZip dir

            FileUtil.delete(new File(root, "outputs/unzip/"));
            System.out.println("sign APK");
            File signedApk = new File(root, "outputs/signed.apk");
            SignUtil.signature(unsignedApk, signedApk, keystore, keyStorePassword, keyPassword, alias);
            System.out.println("Finished!!!");

            // *************unZip shell AAR*************
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 生成ZipUtils的class
     *
     * @return
     */
    public static byte[] generateZipUtils() {
        ClassWriter cw = new ClassWriter(0);
        FieldVisitor fv;
        MethodVisitor mv;
        AnnotationVisitor av0;

        cw.visit(52, ACC_PUBLIC + ACC_SUPER, "com/wangyz/plugins/util/ZipUtils", null, "java/lang/Object", null);

        cw.visitSource("ZipUtil.java", null);

        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(15, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            mv.visitInsn(RETURN);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLocalVariable("this", "Lcom/wangyz/plugins/util/ZipUtils;", null, l0, l1, 0);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "unZip", "(Ljava/io/File;Ljava/io/File;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Exception");
            mv.visitLabel(l0);
            mv.visitLineNumber(19, l0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "delete", "()Z", false);
            mv.visitInsn(POP);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(20, l3);
            mv.visitTypeInsn(NEW, "java/util/zip/ZipFile");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/zip/ZipFile", "<init>", "(Ljava/io/File;)V", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(21, l4);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipFile", "entries", "()Ljava/util/Enumeration;", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(22, l5);
            mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"java/util/zip/ZipFile", "java/util/Enumeration"}, 0, null);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Enumeration", "hasMoreElements", "()Z", true);
            Label l6 = new Label();
            mv.visitJumpInsn(IFEQ, l6);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(23, l7);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Enumeration", "nextElement", "()Ljava/lang/Object;", true);
            mv.visitTypeInsn(CHECKCAST, "java/util/zip/ZipEntry");
            mv.visitVarInsn(ASTORE, 4);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(24, l8);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipEntry", "getName", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 5);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(25, l9);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("META-INF/CERT.RSA");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
            mv.visitJumpInsn(IFNE, l5);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("META-INF/CERT.SF");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
            mv.visitJumpInsn(IFNE, l5);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("META-INF/MANIFEST.MF");
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(26, l10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
            Label l11 = new Label();
            mv.visitJumpInsn(IFEQ, l11);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(27, l12);
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l11);
            mv.visitLineNumber(29, l11);
            mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"java/util/zip/ZipEntry", "java/lang/String"}, 0, null);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipEntry", "isDirectory", "()Z", false);
            Label l13 = new Label();
            mv.visitJumpInsn(IFNE, l13);
            Label l14 = new Label();
            mv.visitLabel(l14);
            mv.visitLineNumber(30, l14);
            mv.visitTypeInsn(NEW, "java/io/File");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/io/File;Ljava/lang/String;)V", false);
            mv.visitVarInsn(ASTORE, 6);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(31, l15);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getParentFile", "()Ljava/io/File;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "exists", "()Z", false);
            Label l16 = new Label();
            mv.visitJumpInsn(IFNE, l16);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLineNumber(32, l17);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getParentFile", "()Ljava/io/File;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "mkdirs", "()Z", false);
            mv.visitInsn(POP);
            mv.visitLabel(l16);
            mv.visitLineNumber(34, l16);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/io/File"}, 0, null);
            mv.visitTypeInsn(NEW, "java/io/FileOutputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/FileOutputStream", "<init>", "(Ljava/io/File;)V", false);
            mv.visitVarInsn(ASTORE, 7);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(35, l18);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipFile", "getInputStream", "(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;", false);
            mv.visitVarInsn(ASTORE, 8);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitLineNumber(36, l19);
            mv.visitIntInsn(SIPUSH, 1024);
            mv.visitIntInsn(NEWARRAY, T_BYTE);
            mv.visitVarInsn(ASTORE, 9);
            Label l20 = new Label();
            mv.visitLabel(l20);
            mv.visitLineNumber(38, l20);
            mv.visitFrame(Opcodes.F_APPEND, 3, new Object[]{"java/io/FileOutputStream", "java/io/InputStream", "[B"}, 0, null);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "read", "([B)I", false);
            mv.visitInsn(DUP);
            mv.visitVarInsn(ISTORE, 10);
            Label l21 = new Label();
            mv.visitLabel(l21);
            mv.visitInsn(ICONST_M1);
            Label l22 = new Label();
            mv.visitJumpInsn(IF_ICMPEQ, l22);
            Label l23 = new Label();
            mv.visitLabel(l23);
            mv.visitLineNumber(39, l23);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ILOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "write", "([BII)V", false);
            mv.visitJumpInsn(GOTO, l20);
            mv.visitLabel(l22);
            mv.visitLineNumber(41, l22);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{Opcodes.INTEGER}, 0, null);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            Label l24 = new Label();
            mv.visitLabel(l24);
            mv.visitLineNumber(42, l24);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
            mv.visitLabel(l13);
            mv.visitLineNumber(44, l13);
            mv.visitFrame(Opcodes.F_FULL, 4, new Object[]{"java/io/File", "java/io/File", "java/util/zip/ZipFile", "java/util/Enumeration"}, 0, new Object[]{});
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l6);
            mv.visitLineNumber(45, l6);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipFile", "close", "()V", false);
            mv.visitLabel(l1);
            mv.visitLineNumber(48, l1);
            Label l25 = new Label();
            mv.visitJumpInsn(GOTO, l25);
            mv.visitLabel(l2);
            mv.visitLineNumber(46, l2);
            mv.visitFrame(Opcodes.F_FULL, 2, new Object[]{"java/io/File", "java/io/File"}, 1, new Object[]{"java/lang/Exception"});
            mv.visitVarInsn(ASTORE, 2);
            Label l26 = new Label();
            mv.visitLabel(l26);
            mv.visitLineNumber(47, l26);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "printStackTrace", "()V", false);
            mv.visitLabel(l25);
            mv.visitLineNumber(49, l25);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(RETURN);
            Label l27 = new Label();
            mv.visitLabel(l27);
            mv.visitLocalVariable("file", "Ljava/io/File;", null, l15, l13, 6);
            mv.visitLocalVariable("fos", "Ljava/io/FileOutputStream;", null, l18, l13, 7);
            mv.visitLocalVariable("is", "Ljava/io/InputStream;", null, l19, l13, 8);
            mv.visitLocalVariable("buffer", "[B", null, l20, l13, 9);
            mv.visitLocalVariable("len", "I", null, l21, l13, 10);
            mv.visitLocalVariable("zipEntry", "Ljava/util/zip/ZipEntry;", null, l8, l13, 4);
            mv.visitLocalVariable("name", "Ljava/lang/String;", null, l9, l13, 5);
            mv.visitLocalVariable("zipFile", "Ljava/util/zip/ZipFile;", null, l4, l1, 2);
            mv.visitLocalVariable("entries", "Ljava/util/Enumeration;", "Ljava/util/Enumeration<+Ljava/util/zip/ZipEntry;>;", l5, l1, 3);
            mv.visitLocalVariable("e", "Ljava/lang/Exception;", null, l26, l25, 2);
            mv.visitLocalVariable("zip", "Ljava/io/File;", null, l0, l27, 0);
            mv.visitLocalVariable("dir", "Ljava/io/File;", null, l0, l27, 1);
            mv.visitMaxs(4, 11);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "zip", "(Ljava/io/File;Ljava/io/File;)V", null, new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(52, l0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "delete", "()Z", false);
            mv.visitInsn(POP);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(53, l1);
            mv.visitTypeInsn(NEW, "java/util/zip/CheckedOutputStream");
            mv.visitInsn(DUP);
            mv.visitTypeInsn(NEW, "java/io/FileOutputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/FileOutputStream", "<init>", "(Ljava/io/File;)V", false);
            mv.visitTypeInsn(NEW, "java/util/zip/CRC32");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/zip/CRC32", "<init>", "()V", false);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/zip/CheckedOutputStream", "<init>", "(Ljava/io/OutputStream;Ljava/util/zip/Checksum;)V", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(54, l2);
            mv.visitTypeInsn(NEW, "java/util/zip/ZipOutputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/zip/ZipOutputStream", "<init>", "(Ljava/io/OutputStream;)V", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(55, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitLdcInsn("");
            mv.visitMethodInsn(INVOKESTATIC, "com/wangyz/plugins/util/ZipUtils", "compress", "(Ljava/io/File;Ljava/util/zip/ZipOutputStream;Ljava/lang/String;)V", false);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(56, l4);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipOutputStream", "flush", "()V", false);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(57, l5);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipOutputStream", "close", "()V", false);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(58, l6);
            mv.visitInsn(RETURN);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLocalVariable("dir", "Ljava/io/File;", null, l0, l7, 0);
            mv.visitLocalVariable("zip", "Ljava/io/File;", null, l0, l7, 1);
            mv.visitLocalVariable("cos", "Ljava/util/zip/CheckedOutputStream;", null, l2, l7, 2);
            mv.visitLocalVariable("zos", "Ljava/util/zip/ZipOutputStream;", null, l3, l7, 3);
            mv.visitMaxs(5, 4);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "compress", "(Ljava/io/File;Ljava/util/zip/ZipOutputStream;Ljava/lang/String;)V", null, new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(61, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "isDirectory", "()Z", false);
            Label l1 = new Label();
            mv.visitJumpInsn(IFEQ, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(62, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKESTATIC, "com/wangyz/plugins/util/ZipUtils", "compressDir", "(Ljava/io/File;Ljava/util/zip/ZipOutputStream;Ljava/lang/String;)V", false);
            Label l3 = new Label();
            mv.visitJumpInsn(GOTO, l3);
            mv.visitLabel(l1);
            mv.visitLineNumber(64, l1);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKESTATIC, "com/wangyz/plugins/util/ZipUtils", "compressFile", "(Ljava/io/File;Ljava/util/zip/ZipOutputStream;Ljava/lang/String;)V", false);
            mv.visitLabel(l3);
            mv.visitLineNumber(66, l3);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(RETURN);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLocalVariable("srcFile", "Ljava/io/File;", null, l0, l4, 0);
            mv.visitLocalVariable("zos", "Ljava/util/zip/ZipOutputStream;", null, l0, l4, 1);
            mv.visitLocalVariable("basePath", "Ljava/lang/String;", null, l0, l4, 2);
            mv.visitMaxs(3, 3);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "compressDir", "(Ljava/io/File;Ljava/util/zip/ZipOutputStream;Ljava/lang/String;)V", null, new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(69, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "listFiles", "()[Ljava/io/File;", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(70, l1);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitInsn(ICONST_1);
            Label l2 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(71, l3);
            mv.visitTypeInsn(NEW, "java/util/zip/ZipEntry");
            mv.visitInsn(DUP);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getName", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("/");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/zip/ZipEntry", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitVarInsn(ASTORE, 4);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(72, l4);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipOutputStream", "putNextEntry", "(Ljava/util/zip/ZipEntry;)V", false);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(73, l5);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipOutputStream", "closeEntry", "()V", false);
            mv.visitLabel(l2);
            mv.visitLineNumber(75, l2);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"[Ljava/io/File;"}, 0, null);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ASTORE, 4);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitVarInsn(ISTORE, 5);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 6);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitFrame(Opcodes.F_APPEND, 3, new Object[]{"[Ljava/io/File;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
            mv.visitVarInsn(ILOAD, 6);
            mv.visitVarInsn(ILOAD, 5);
            Label l7 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l7);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ILOAD, 6);
            mv.visitInsn(AALOAD);
            mv.visitVarInsn(ASTORE, 7);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(76, l8);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getName", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("/");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESTATIC, "com/wangyz/plugins/util/ZipUtils", "compress", "(Ljava/io/File;Ljava/util/zip/ZipOutputStream;Ljava/lang/String;)V", false);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(75, l9);
            mv.visitIincInsn(6, 1);
            mv.visitJumpInsn(GOTO, l6);
            mv.visitLabel(l7);
            mv.visitLineNumber(78, l7);
            mv.visitFrame(Opcodes.F_CHOP, 3, null, 0, null);
            mv.visitInsn(RETURN);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLocalVariable("entry", "Ljava/util/zip/ZipEntry;", null, l4, l2, 4);
            mv.visitLocalVariable("file", "Ljava/io/File;", null, l8, l9, 7);
            mv.visitLocalVariable("dir", "Ljava/io/File;", null, l0, l10, 0);
            mv.visitLocalVariable("zos", "Ljava/util/zip/ZipOutputStream;", null, l0, l10, 1);
            mv.visitLocalVariable("basePath", "Ljava/lang/String;", null, l0, l10, 2);
            mv.visitLocalVariable("files", "[Ljava/io/File;", null, l1, l10, 3);
            mv.visitMaxs(4, 8);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "compressFile", "(Ljava/io/File;Ljava/util/zip/ZipOutputStream;Ljava/lang/String;)V", null, new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(82, l0);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getName", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(84, l1);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitLdcInsn("/");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "split", "(Ljava/lang/String;)[Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 4);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(86, l2);
            mv.visitTypeInsn(NEW, "java/lang/StringBuffer");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuffer", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 5);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(88, l3);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitInsn(ICONST_1);
            Label l4 = new Label();
            mv.visitJumpInsn(IF_ICMPLE, l4);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(89, l5);
            mv.visitInsn(ICONST_1);
            mv.visitVarInsn(ISTORE, 6);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitFrame(Opcodes.F_FULL, 7, new Object[]{"java/io/File", "java/util/zip/ZipOutputStream", "java/lang/String", "java/lang/String", "[Ljava/lang/String;", "java/lang/StringBuffer", Opcodes.INTEGER}, 0, new Object[]{});
            mv.visitVarInsn(ILOAD, 6);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitInsn(ARRAYLENGTH);
            Label l7 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l7);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(90, l8);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("/");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuffer", "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;", false);
            mv.visitInsn(POP);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(91, l9);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ILOAD, 6);
            mv.visitInsn(AALOAD);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuffer", "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;", false);
            mv.visitInsn(POP);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(89, l10);
            mv.visitIincInsn(6, 1);
            mv.visitJumpInsn(GOTO, l6);
            mv.visitLabel(l7);
            mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            Label l11 = new Label();
            mv.visitJumpInsn(GOTO, l11);
            mv.visitLabel(l4);
            mv.visitLineNumber(95, l4);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("/");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuffer", "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;", false);
            mv.visitInsn(POP);
            mv.visitLabel(l11);
            mv.visitLineNumber(98, l11);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitTypeInsn(NEW, "java/util/zip/ZipEntry");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuffer", "toString", "()Ljava/lang/String;", false);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(I)Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/zip/ZipEntry", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitVarInsn(ASTORE, 6);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(99, l12);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipOutputStream", "putNextEntry", "(Ljava/util/zip/ZipEntry;)V", false);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(100, l13);
            mv.visitTypeInsn(NEW, "java/io/BufferedInputStream");
            mv.visitInsn(DUP);
            mv.visitTypeInsn(NEW, "java/io/FileInputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/FileInputStream", "<init>", "(Ljava/io/File;)V", false);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedInputStream", "<init>", "(Ljava/io/InputStream;)V", false);
            mv.visitVarInsn(ASTORE, 7);
            Label l14 = new Label();
            mv.visitLabel(l14);
            mv.visitLineNumber(102, l14);
            mv.visitIntInsn(SIPUSH, 1024);
            mv.visitIntInsn(NEWARRAY, T_BYTE);
            mv.visitVarInsn(ASTORE, 9);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(103, l15);
            mv.visitFrame(Opcodes.F_FULL, 10, new Object[]{"java/io/File", "java/util/zip/ZipOutputStream", "java/lang/String", "java/lang/String", "[Ljava/lang/String;", "java/lang/StringBuffer", "java/util/zip/ZipEntry", "java/io/BufferedInputStream", Opcodes.TOP, "[B"}, 0, new Object[]{});
            mv.visitVarInsn(ALOAD, 7);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitInsn(ICONST_0);
            mv.visitIntInsn(SIPUSH, 1024);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedInputStream", "read", "([BII)I", false);
            mv.visitInsn(DUP);
            mv.visitVarInsn(ISTORE, 8);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitInsn(ICONST_M1);
            Label l17 = new Label();
            mv.visitJumpInsn(IF_ICMPEQ, l17);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(104, l18);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipOutputStream", "write", "([BII)V", false);
            mv.visitJumpInsn(GOTO, l15);
            mv.visitLabel(l17);
            mv.visitLineNumber(106, l17);
            mv.visitFrame(Opcodes.F_FULL, 10, new Object[]{"java/io/File", "java/util/zip/ZipOutputStream", "java/lang/String", "java/lang/String", "[Ljava/lang/String;", "java/lang/StringBuffer", "java/util/zip/ZipEntry", "java/io/BufferedInputStream", Opcodes.INTEGER, "[B"}, 0, new Object[]{});
            mv.visitVarInsn(ALOAD, 7);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedInputStream", "close", "()V", false);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitLineNumber(107, l19);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipOutputStream", "closeEntry", "()V", false);
            Label l20 = new Label();
            mv.visitLabel(l20);
            mv.visitLineNumber(108, l20);
            mv.visitInsn(RETURN);
            Label l21 = new Label();
            mv.visitLabel(l21);
            mv.visitLocalVariable("i", "I", null, l6, l7, 6);
            mv.visitLocalVariable("file", "Ljava/io/File;", null, l0, l21, 0);
            mv.visitLocalVariable("zos", "Ljava/util/zip/ZipOutputStream;", null, l0, l21, 1);
            mv.visitLocalVariable("dir", "Ljava/lang/String;", null, l0, l21, 2);
            mv.visitLocalVariable("dirName", "Ljava/lang/String;", null, l1, l21, 3);
            mv.visitLocalVariable("dirNameNew", "[Ljava/lang/String;", null, l2, l21, 4);
            mv.visitLocalVariable("buffer", "Ljava/lang/StringBuffer;", null, l3, l21, 5);
            mv.visitLocalVariable("entry", "Ljava/util/zip/ZipEntry;", null, l12, l21, 6);
            mv.visitLocalVariable("bis", "Ljava/io/BufferedInputStream;", null, l14, l21, 7);
            mv.visitLocalVariable("count", "I", null, l16, l21, 8);
            mv.visitLocalVariable("data", "[B", null, l15, l21, 9);
            mv.visitMaxs(5, 10);
            mv.visitEnd();
        }
        cw.visitEnd();

        return cw.toByteArray();
    }

    /**
     * 生成EncryptUtils的class
     *
     * @return
     */
    public static byte[] generateEncryptUtils() {

        ClassWriter classWriter = new ClassWriter(0);
        FieldVisitor fieldVisitor;
        MethodVisitor methodVisitor;
        AnnotationVisitor annotationVisitor0;

        classWriter.visit(V1_8, ACC_PUBLIC | ACC_SUPER, "com/wangyz/plugins/util/EncryptUtils", null, "java/lang/Object", null);

        classWriter.visitSource("EncryptUtils.java", null);

        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "PASSWORD", "B", null, new Integer(65));
            fieldVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "<init>", "()V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(12, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(13, label1);
            methodVisitor.visitTypeInsn(NEW, "java/lang/UnsupportedOperationException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("u can't instantiate me...");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/UnsupportedOperationException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/wangyz/plugins/util/EncryptUtils;", null, label0, label2, 0);
            methodVisitor.visitMaxs(3, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "encrypt", "(Ljava/lang/String;Ljava/lang/String;)Z", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/io/IOException");
            Label label3 = new Label();
            Label label4 = new Label();
            Label label5 = new Label();
            methodVisitor.visitTryCatchBlock(label3, label4, label5, "java/io/IOException");
            Label label6 = new Label();
            Label label7 = new Label();
            Label label8 = new Label();
            methodVisitor.visitTryCatchBlock(label6, label7, label8, "java/io/IOException");
            Label label9 = new Label();
            Label label10 = new Label();
            Label label11 = new Label();
            methodVisitor.visitTryCatchBlock(label9, label10, label11, "java/io/IOException");
            Label label12 = new Label();
            Label label13 = new Label();
            Label label14 = new Label();
            methodVisitor.visitTryCatchBlock(label12, label13, label14, "java/lang/Exception");
            Label label15 = new Label();
            Label label16 = new Label();
            methodVisitor.visitTryCatchBlock(label15, label16, label14, "java/lang/Exception");
            Label label17 = new Label();
            Label label18 = new Label();
            Label label19 = new Label();
            methodVisitor.visitTryCatchBlock(label17, label18, label19, "java/io/IOException");
            Label label20 = new Label();
            Label label21 = new Label();
            Label label22 = new Label();
            methodVisitor.visitTryCatchBlock(label20, label21, label22, "java/io/IOException");
            Label label23 = new Label();
            methodVisitor.visitTryCatchBlock(label12, label13, label23, null);
            methodVisitor.visitTryCatchBlock(label15, label16, label23, null);
            Label label24 = new Label();
            methodVisitor.visitTryCatchBlock(label14, label24, label23, null);
            Label label25 = new Label();
            Label label26 = new Label();
            Label label27 = new Label();
            methodVisitor.visitTryCatchBlock(label25, label26, label27, "java/io/IOException");
            Label label28 = new Label();
            Label label29 = new Label();
            Label label30 = new Label();
            methodVisitor.visitTryCatchBlock(label28, label29, label30, "java/io/IOException");
            Label label31 = new Label();
            methodVisitor.visitTryCatchBlock(label23, label31, label23, null);
            Label label32 = new Label();
            methodVisitor.visitLabel(label32);
            methodVisitor.visitLineNumber(24, label32);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            Label label33 = new Label();
            methodVisitor.visitLabel(label33);
            methodVisitor.visitLineNumber(25, label33);
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label34 = new Label();
            methodVisitor.visitLabel(label34);
            methodVisitor.visitLineNumber(26, label34);
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitVarInsn(ASTORE, 4);
            methodVisitor.visitLabel(label12);
            methodVisitor.visitLineNumber(28, label12);
            methodVisitor.visitTypeInsn(NEW, "java/io/File");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label35 = new Label();
            methodVisitor.visitLabel(label35);
            methodVisitor.visitLineNumber(29, label35);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "exists", "()Z", false);
            methodVisitor.visitJumpInsn(IFNE, label15);
            Label label36 = new Label();
            methodVisitor.visitLabel(label36);
            methodVisitor.visitLineNumber(30, label36);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 6);
            methodVisitor.visitLabel(label13);
            methodVisitor.visitLineNumber(46, label13);
            methodVisitor.visitVarInsn(ALOAD, 4);
            Label label37 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label37);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(48, label0);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(51, label1);
            methodVisitor.visitJumpInsn(GOTO, label37);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(49, label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 7, new Object[]{"java/lang/String", "java/lang/String", Opcodes.INTEGER, "java/io/FileInputStream", "java/io/FileOutputStream", "java/io/File", Opcodes.INTEGER}, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 7);
            Label label38 = new Label();
            methodVisitor.visitLabel(label38);
            methodVisitor.visitLineNumber(50, label38);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label37);
            methodVisitor.visitLineNumber(53, label37);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            Label label39 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label39);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(55, label3);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileInputStream", "close", "()V", false);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(58, label4);
            methodVisitor.visitJumpInsn(GOTO, label39);
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(56, label5);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 7);
            Label label40 = new Label();
            methodVisitor.visitLabel(label40);
            methodVisitor.visitLineNumber(57, label40);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label39);
            methodVisitor.visitLineNumber(30, label39);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ILOAD, 6);
            methodVisitor.visitInsn(IRETURN);
            methodVisitor.visitLabel(label15);
            methodVisitor.visitLineNumber(32, label15);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/io/FileInputStream");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/FileInputStream", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label41 = new Label();
            methodVisitor.visitLabel(label41);
            methodVisitor.visitLineNumber(33, label41);
            methodVisitor.visitTypeInsn(NEW, "java/io/FileOutputStream");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/FileOutputStream", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitVarInsn(ASTORE, 4);
            Label label42 = new Label();
            methodVisitor.visitLabel(label42);
            methodVisitor.visitLineNumber(34, label42);
            methodVisitor.visitIntInsn(SIPUSH, 1024);
            methodVisitor.visitIntInsn(NEWARRAY, T_BYTE);
            methodVisitor.visitVarInsn(ASTORE, 6);
            Label label43 = new Label();
            methodVisitor.visitLabel(label43);
            methodVisitor.visitLineNumber(35, label43);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 7);
            Label label44 = new Label();
            methodVisitor.visitLabel(label44);
            methodVisitor.visitLineNumber(36, label44);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"[B", Opcodes.INTEGER}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileInputStream", "read", "([B)I", false);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ISTORE, 7);
            methodVisitor.visitInsn(ICONST_M1);
            Label label45 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPEQ, label45);
            Label label46 = new Label();
            methodVisitor.visitLabel(label46);
            methodVisitor.visitLineNumber(37, label46);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 8);
            Label label47 = new Label();
            methodVisitor.visitLabel(label47);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 1, new Object[]{Opcodes.INTEGER}, 0, null);
            methodVisitor.visitVarInsn(ILOAD, 8);
            methodVisitor.visitVarInsn(ILOAD, 7);
            Label label48 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label48);
            Label label49 = new Label();
            methodVisitor.visitLabel(label49);
            methodVisitor.visitLineNumber(38, label49);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitVarInsn(ILOAD, 8);
            methodVisitor.visitInsn(DUP2);
            methodVisitor.visitInsn(BALOAD);
            methodVisitor.visitIntInsn(BIPUSH, 65);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitInsn(I2B);
            methodVisitor.visitInsn(BASTORE);
            Label label50 = new Label();
            methodVisitor.visitLabel(label50);
            methodVisitor.visitLineNumber(37, label50);
            methodVisitor.visitIincInsn(8, 1);
            methodVisitor.visitJumpInsn(GOTO, label47);
            methodVisitor.visitLabel(label48);
            methodVisitor.visitLineNumber(40, label48);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ILOAD, 7);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "write", "([BII)V", false);
            methodVisitor.visitJumpInsn(GOTO, label44);
            methodVisitor.visitLabel(label45);
            methodVisitor.visitLineNumber(42, label45);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitVarInsn(ISTORE, 2);
            methodVisitor.visitLabel(label16);
            methodVisitor.visitLineNumber(46, label16);
            methodVisitor.visitVarInsn(ALOAD, 4);
            Label label51 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label51);
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(48, label6);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLineNumber(51, label7);
            methodVisitor.visitJumpInsn(GOTO, label51);
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLineNumber(49, label8);
            methodVisitor.visitFrame(Opcodes.F_FULL, 5, new Object[]{"java/lang/String", "java/lang/String", Opcodes.INTEGER, "java/io/FileInputStream", "java/io/FileOutputStream"}, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label52 = new Label();
            methodVisitor.visitLabel(label52);
            methodVisitor.visitLineNumber(50, label52);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label51);
            methodVisitor.visitLineNumber(53, label51);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            Label label53 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label53);
            methodVisitor.visitLabel(label9);
            methodVisitor.visitLineNumber(55, label9);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileInputStream", "close", "()V", false);
            methodVisitor.visitLabel(label10);
            methodVisitor.visitLineNumber(58, label10);
            methodVisitor.visitJumpInsn(GOTO, label53);
            methodVisitor.visitLabel(label11);
            methodVisitor.visitLineNumber(56, label11);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label54 = new Label();
            methodVisitor.visitLabel(label54);
            methodVisitor.visitLineNumber(57, label54);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            Label label55 = new Label();
            methodVisitor.visitLabel(label55);
            methodVisitor.visitLineNumber(58, label55);
            methodVisitor.visitJumpInsn(GOTO, label53);
            methodVisitor.visitLabel(label14);
            methodVisitor.visitLineNumber(43, label14);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Exception"});
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label56 = new Label();
            methodVisitor.visitLabel(label56);
            methodVisitor.visitLineNumber(44, label56);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label24);
            methodVisitor.visitLineNumber(46, label24);
            methodVisitor.visitVarInsn(ALOAD, 4);
            Label label57 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label57);
            methodVisitor.visitLabel(label17);
            methodVisitor.visitLineNumber(48, label17);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
            methodVisitor.visitLabel(label18);
            methodVisitor.visitLineNumber(51, label18);
            methodVisitor.visitJumpInsn(GOTO, label57);
            methodVisitor.visitLabel(label19);
            methodVisitor.visitLineNumber(49, label19);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label58 = new Label();
            methodVisitor.visitLabel(label58);
            methodVisitor.visitLineNumber(50, label58);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label57);
            methodVisitor.visitLineNumber(53, label57);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitJumpInsn(IFNULL, label53);
            methodVisitor.visitLabel(label20);
            methodVisitor.visitLineNumber(55, label20);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileInputStream", "close", "()V", false);
            methodVisitor.visitLabel(label21);
            methodVisitor.visitLineNumber(58, label21);
            methodVisitor.visitJumpInsn(GOTO, label53);
            methodVisitor.visitLabel(label22);
            methodVisitor.visitLineNumber(56, label22);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label59 = new Label();
            methodVisitor.visitLabel(label59);
            methodVisitor.visitLineNumber(57, label59);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            Label label60 = new Label();
            methodVisitor.visitLabel(label60);
            methodVisitor.visitLineNumber(58, label60);
            methodVisitor.visitJumpInsn(GOTO, label53);
            methodVisitor.visitLabel(label23);
            methodVisitor.visitLineNumber(46, label23);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 9);
            methodVisitor.visitLabel(label31);
            methodVisitor.visitVarInsn(ALOAD, 4);
            Label label61 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label61);
            methodVisitor.visitLabel(label25);
            methodVisitor.visitLineNumber(48, label25);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
            methodVisitor.visitLabel(label26);
            methodVisitor.visitLineNumber(51, label26);
            methodVisitor.visitJumpInsn(GOTO, label61);
            methodVisitor.visitLabel(label27);
            methodVisitor.visitLineNumber(49, label27);
            methodVisitor.visitFrame(Opcodes.F_FULL, 10, new Object[]{"java/lang/String", "java/lang/String", Opcodes.INTEGER, "java/io/FileInputStream", "java/io/FileOutputStream", Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 10);
            Label label62 = new Label();
            methodVisitor.visitLabel(label62);
            methodVisitor.visitLineNumber(50, label62);
            methodVisitor.visitVarInsn(ALOAD, 10);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label61);
            methodVisitor.visitLineNumber(53, label61);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            Label label63 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label63);
            methodVisitor.visitLabel(label28);
            methodVisitor.visitLineNumber(55, label28);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileInputStream", "close", "()V", false);
            methodVisitor.visitLabel(label29);
            methodVisitor.visitLineNumber(58, label29);
            methodVisitor.visitJumpInsn(GOTO, label63);
            methodVisitor.visitLabel(label30);
            methodVisitor.visitLineNumber(56, label30);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 10);
            Label label64 = new Label();
            methodVisitor.visitLabel(label64);
            methodVisitor.visitLineNumber(57, label64);
            methodVisitor.visitVarInsn(ALOAD, 10);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label63);
            methodVisitor.visitLineNumber(60, label63);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label53);
            methodVisitor.visitLineNumber(61, label53);
            methodVisitor.visitFrame(Opcodes.F_FULL, 5, new Object[]{"java/lang/String", "java/lang/String", Opcodes.INTEGER, "java/io/FileInputStream", "java/io/FileOutputStream"}, 0, new Object[]{});
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(IRETURN);
            Label label65 = new Label();
            methodVisitor.visitLabel(label65);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label38, label37, 7);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label40, label39, 7);
            methodVisitor.visitLocalVariable("i", "I", null, label47, label48, 8);
            methodVisitor.visitLocalVariable("in", "Ljava/io/File;", null, label35, label16, 5);
            methodVisitor.visitLocalVariable("buffer", "[B", null, label43, label16, 6);
            methodVisitor.visitLocalVariable("len", "I", null, label44, label16, 7);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label52, label51, 5);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label54, label55, 5);
            methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label56, label24, 5);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label58, label57, 5);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label59, label60, 5);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label62, label61, 10);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label64, label63, 10);
            methodVisitor.visitLocalVariable("input", "Ljava/lang/String;", null, label32, label65, 0);
            methodVisitor.visitLocalVariable("output", "Ljava/lang/String;", null, label32, label65, 1);
            methodVisitor.visitLocalVariable("result", "Z", null, label33, label65, 2);
            methodVisitor.visitLocalVariable("fis", "Ljava/io/FileInputStream;", null, label34, label65, 3);
            methodVisitor.visitLocalVariable("fos", "Ljava/io/FileOutputStream;", null, label12, label65, 4);
            methodVisitor.visitMaxs(4, 11);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "decrypt", "(Ljava/lang/String;Ljava/lang/String;)Z", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/io/IOException");
            Label label3 = new Label();
            Label label4 = new Label();
            Label label5 = new Label();
            methodVisitor.visitTryCatchBlock(label3, label4, label5, "java/io/IOException");
            Label label6 = new Label();
            Label label7 = new Label();
            Label label8 = new Label();
            methodVisitor.visitTryCatchBlock(label6, label7, label8, "java/io/IOException");
            Label label9 = new Label();
            Label label10 = new Label();
            Label label11 = new Label();
            methodVisitor.visitTryCatchBlock(label9, label10, label11, "java/io/IOException");
            Label label12 = new Label();
            Label label13 = new Label();
            Label label14 = new Label();
            methodVisitor.visitTryCatchBlock(label12, label13, label14, "java/lang/Exception");
            Label label15 = new Label();
            Label label16 = new Label();
            methodVisitor.visitTryCatchBlock(label15, label16, label14, "java/lang/Exception");
            Label label17 = new Label();
            Label label18 = new Label();
            Label label19 = new Label();
            methodVisitor.visitTryCatchBlock(label17, label18, label19, "java/io/IOException");
            Label label20 = new Label();
            Label label21 = new Label();
            Label label22 = new Label();
            methodVisitor.visitTryCatchBlock(label20, label21, label22, "java/io/IOException");
            Label label23 = new Label();
            methodVisitor.visitTryCatchBlock(label12, label13, label23, null);
            methodVisitor.visitTryCatchBlock(label15, label16, label23, null);
            Label label24 = new Label();
            methodVisitor.visitTryCatchBlock(label14, label24, label23, null);
            Label label25 = new Label();
            Label label26 = new Label();
            Label label27 = new Label();
            methodVisitor.visitTryCatchBlock(label25, label26, label27, "java/io/IOException");
            Label label28 = new Label();
            Label label29 = new Label();
            Label label30 = new Label();
            methodVisitor.visitTryCatchBlock(label28, label29, label30, "java/io/IOException");
            Label label31 = new Label();
            methodVisitor.visitTryCatchBlock(label23, label31, label23, null);
            Label label32 = new Label();
            methodVisitor.visitLabel(label32);
            methodVisitor.visitLineNumber(72, label32);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            Label label33 = new Label();
            methodVisitor.visitLabel(label33);
            methodVisitor.visitLineNumber(73, label33);
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label34 = new Label();
            methodVisitor.visitLabel(label34);
            methodVisitor.visitLineNumber(74, label34);
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitVarInsn(ASTORE, 4);
            methodVisitor.visitLabel(label12);
            methodVisitor.visitLineNumber(76, label12);
            methodVisitor.visitTypeInsn(NEW, "java/io/File");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label35 = new Label();
            methodVisitor.visitLabel(label35);
            methodVisitor.visitLineNumber(77, label35);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "exists", "()Z", false);
            methodVisitor.visitJumpInsn(IFNE, label15);
            Label label36 = new Label();
            methodVisitor.visitLabel(label36);
            methodVisitor.visitLineNumber(78, label36);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 6);
            methodVisitor.visitLabel(label13);
            methodVisitor.visitLineNumber(94, label13);
            methodVisitor.visitVarInsn(ALOAD, 4);
            Label label37 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label37);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(96, label0);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(99, label1);
            methodVisitor.visitJumpInsn(GOTO, label37);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(97, label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 7, new Object[]{"java/lang/String", "java/lang/String", Opcodes.INTEGER, "java/io/FileInputStream", "java/io/FileOutputStream", "java/io/File", Opcodes.INTEGER}, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 7);
            Label label38 = new Label();
            methodVisitor.visitLabel(label38);
            methodVisitor.visitLineNumber(98, label38);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label37);
            methodVisitor.visitLineNumber(101, label37);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            Label label39 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label39);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(103, label3);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileInputStream", "close", "()V", false);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(106, label4);
            methodVisitor.visitJumpInsn(GOTO, label39);
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(104, label5);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 7);
            Label label40 = new Label();
            methodVisitor.visitLabel(label40);
            methodVisitor.visitLineNumber(105, label40);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label39);
            methodVisitor.visitLineNumber(78, label39);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ILOAD, 6);
            methodVisitor.visitInsn(IRETURN);
            methodVisitor.visitLabel(label15);
            methodVisitor.visitLineNumber(80, label15);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/io/FileInputStream");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/FileInputStream", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label41 = new Label();
            methodVisitor.visitLabel(label41);
            methodVisitor.visitLineNumber(81, label41);
            methodVisitor.visitTypeInsn(NEW, "java/io/FileOutputStream");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/FileOutputStream", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitVarInsn(ASTORE, 4);
            Label label42 = new Label();
            methodVisitor.visitLabel(label42);
            methodVisitor.visitLineNumber(82, label42);
            methodVisitor.visitIntInsn(SIPUSH, 1024);
            methodVisitor.visitIntInsn(NEWARRAY, T_BYTE);
            methodVisitor.visitVarInsn(ASTORE, 6);
            Label label43 = new Label();
            methodVisitor.visitLabel(label43);
            methodVisitor.visitLineNumber(84, label43);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"[B"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileInputStream", "read", "([B)I", false);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ISTORE, 7);
            Label label44 = new Label();
            methodVisitor.visitLabel(label44);
            methodVisitor.visitInsn(ICONST_M1);
            Label label45 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPEQ, label45);
            Label label46 = new Label();
            methodVisitor.visitLabel(label46);
            methodVisitor.visitLineNumber(85, label46);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 8);
            Label label47 = new Label();
            methodVisitor.visitLabel(label47);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 2, new Object[]{Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
            methodVisitor.visitVarInsn(ILOAD, 8);
            methodVisitor.visitVarInsn(ILOAD, 7);
            Label label48 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label48);
            Label label49 = new Label();
            methodVisitor.visitLabel(label49);
            methodVisitor.visitLineNumber(86, label49);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitVarInsn(ILOAD, 8);
            methodVisitor.visitInsn(DUP2);
            methodVisitor.visitInsn(BALOAD);
            methodVisitor.visitIntInsn(BIPUSH, 65);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitInsn(I2B);
            methodVisitor.visitInsn(BASTORE);
            Label label50 = new Label();
            methodVisitor.visitLabel(label50);
            methodVisitor.visitLineNumber(85, label50);
            methodVisitor.visitIincInsn(8, 1);
            methodVisitor.visitJumpInsn(GOTO, label47);
            methodVisitor.visitLabel(label48);
            methodVisitor.visitLineNumber(88, label48);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ILOAD, 7);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "write", "([BII)V", false);
            methodVisitor.visitJumpInsn(GOTO, label43);
            methodVisitor.visitLabel(label45);
            methodVisitor.visitLineNumber(90, label45);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitVarInsn(ISTORE, 2);
            methodVisitor.visitLabel(label16);
            methodVisitor.visitLineNumber(94, label16);
            methodVisitor.visitVarInsn(ALOAD, 4);
            Label label51 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label51);
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(96, label6);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLineNumber(99, label7);
            methodVisitor.visitJumpInsn(GOTO, label51);
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLineNumber(97, label8);
            methodVisitor.visitFrame(Opcodes.F_FULL, 5, new Object[]{"java/lang/String", "java/lang/String", Opcodes.INTEGER, "java/io/FileInputStream", "java/io/FileOutputStream"}, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label52 = new Label();
            methodVisitor.visitLabel(label52);
            methodVisitor.visitLineNumber(98, label52);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label51);
            methodVisitor.visitLineNumber(101, label51);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            Label label53 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label53);
            methodVisitor.visitLabel(label9);
            methodVisitor.visitLineNumber(103, label9);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileInputStream", "close", "()V", false);
            methodVisitor.visitLabel(label10);
            methodVisitor.visitLineNumber(106, label10);
            methodVisitor.visitJumpInsn(GOTO, label53);
            methodVisitor.visitLabel(label11);
            methodVisitor.visitLineNumber(104, label11);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label54 = new Label();
            methodVisitor.visitLabel(label54);
            methodVisitor.visitLineNumber(105, label54);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            Label label55 = new Label();
            methodVisitor.visitLabel(label55);
            methodVisitor.visitLineNumber(106, label55);
            methodVisitor.visitJumpInsn(GOTO, label53);
            methodVisitor.visitLabel(label14);
            methodVisitor.visitLineNumber(91, label14);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Exception"});
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label56 = new Label();
            methodVisitor.visitLabel(label56);
            methodVisitor.visitLineNumber(92, label56);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label24);
            methodVisitor.visitLineNumber(94, label24);
            methodVisitor.visitVarInsn(ALOAD, 4);
            Label label57 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label57);
            methodVisitor.visitLabel(label17);
            methodVisitor.visitLineNumber(96, label17);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
            methodVisitor.visitLabel(label18);
            methodVisitor.visitLineNumber(99, label18);
            methodVisitor.visitJumpInsn(GOTO, label57);
            methodVisitor.visitLabel(label19);
            methodVisitor.visitLineNumber(97, label19);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label58 = new Label();
            methodVisitor.visitLabel(label58);
            methodVisitor.visitLineNumber(98, label58);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label57);
            methodVisitor.visitLineNumber(101, label57);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitJumpInsn(IFNULL, label53);
            methodVisitor.visitLabel(label20);
            methodVisitor.visitLineNumber(103, label20);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileInputStream", "close", "()V", false);
            methodVisitor.visitLabel(label21);
            methodVisitor.visitLineNumber(106, label21);
            methodVisitor.visitJumpInsn(GOTO, label53);
            methodVisitor.visitLabel(label22);
            methodVisitor.visitLineNumber(104, label22);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label59 = new Label();
            methodVisitor.visitLabel(label59);
            methodVisitor.visitLineNumber(105, label59);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            Label label60 = new Label();
            methodVisitor.visitLabel(label60);
            methodVisitor.visitLineNumber(106, label60);
            methodVisitor.visitJumpInsn(GOTO, label53);
            methodVisitor.visitLabel(label23);
            methodVisitor.visitLineNumber(94, label23);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 9);
            methodVisitor.visitLabel(label31);
            methodVisitor.visitVarInsn(ALOAD, 4);
            Label label61 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label61);
            methodVisitor.visitLabel(label25);
            methodVisitor.visitLineNumber(96, label25);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
            methodVisitor.visitLabel(label26);
            methodVisitor.visitLineNumber(99, label26);
            methodVisitor.visitJumpInsn(GOTO, label61);
            methodVisitor.visitLabel(label27);
            methodVisitor.visitLineNumber(97, label27);
            methodVisitor.visitFrame(Opcodes.F_FULL, 10, new Object[]{"java/lang/String", "java/lang/String", Opcodes.INTEGER, "java/io/FileInputStream", "java/io/FileOutputStream", Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 10);
            Label label62 = new Label();
            methodVisitor.visitLabel(label62);
            methodVisitor.visitLineNumber(98, label62);
            methodVisitor.visitVarInsn(ALOAD, 10);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label61);
            methodVisitor.visitLineNumber(101, label61);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            Label label63 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label63);
            methodVisitor.visitLabel(label28);
            methodVisitor.visitLineNumber(103, label28);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileInputStream", "close", "()V", false);
            methodVisitor.visitLabel(label29);
            methodVisitor.visitLineNumber(106, label29);
            methodVisitor.visitJumpInsn(GOTO, label63);
            methodVisitor.visitLabel(label30);
            methodVisitor.visitLineNumber(104, label30);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 10);
            Label label64 = new Label();
            methodVisitor.visitLabel(label64);
            methodVisitor.visitLineNumber(105, label64);
            methodVisitor.visitVarInsn(ALOAD, 10);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label63);
            methodVisitor.visitLineNumber(108, label63);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label53);
            methodVisitor.visitLineNumber(109, label53);
            methodVisitor.visitFrame(Opcodes.F_FULL, 5, new Object[]{"java/lang/String", "java/lang/String", Opcodes.INTEGER, "java/io/FileInputStream", "java/io/FileOutputStream"}, 0, new Object[]{});
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(IRETURN);
            Label label65 = new Label();
            methodVisitor.visitLabel(label65);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label38, label37, 7);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label40, label39, 7);
            methodVisitor.visitLocalVariable("i", "I", null, label47, label48, 8);
            methodVisitor.visitLocalVariable("in", "Ljava/io/File;", null, label35, label16, 5);
            methodVisitor.visitLocalVariable("buffer", "[B", null, label43, label16, 6);
            methodVisitor.visitLocalVariable("len", "I", null, label44, label16, 7);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label52, label51, 5);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label54, label55, 5);
            methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label56, label24, 5);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label58, label57, 5);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label59, label60, 5);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label62, label61, 10);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label64, label63, 10);
            methodVisitor.visitLocalVariable("input", "Ljava/lang/String;", null, label32, label65, 0);
            methodVisitor.visitLocalVariable("output", "Ljava/lang/String;", null, label32, label65, 1);
            methodVisitor.visitLocalVariable("result", "Z", null, label33, label65, 2);
            methodVisitor.visitLocalVariable("fis", "Ljava/io/FileInputStream;", null, label34, label65, 3);
            methodVisitor.visitLocalVariable("fos", "Ljava/io/FileOutputStream;", null, label12, label65, 4);
            methodVisitor.visitMaxs(4, 11);
            methodVisitor.visitEnd();
        }
        classWriter.visitEnd();

        return classWriter.toByteArray();
    }

    /**
     * 生成ClassLoaderUtils的class
     *
     * @return
     */
    public static byte[] generateClassLoaderUtils() {

        ClassWriter classWriter = new ClassWriter(0);
        FieldVisitor fieldVisitor;
        MethodVisitor methodVisitor;
        AnnotationVisitor annotationVisitor0;

        classWriter.visit(V1_7, ACC_PUBLIC | ACC_SUPER, "com/wangyz/plugins/util/ClassLoaderUtils", null, "java/lang/Object", null);

        classWriter.visitSource("ClassLoaderUtils.java", null);

        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(19, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            methodVisitor.visitInsn(RETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/wangyz/plugins/util/ClassLoaderUtils;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "loadDex", "(Landroid/content/Context;Ljava/util/List;)V", "(Landroid/content/Context;Ljava/util/List<Ljava/io/File;>;)V", null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/Exception");
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(29, label3);
            methodVisitor.visitVarInsn(ALOAD, 1);
            Label label4 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label4);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "isEmpty", "()Z", true);
            methodVisitor.visitJumpInsn(IFEQ, label0);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(30, label4);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(35, label0);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "android/content/Context", "getClassLoader", "()Ljava/lang/ClassLoader;", false);
            methodVisitor.visitTypeInsn(CHECKCAST, "dalvik/system/PathClassLoader");
            methodVisitor.visitVarInsn(ASTORE, 2);
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(37, label5);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitLdcInsn("pathList");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "com/wangyz/plugins/util/ClassLoaderUtils", "getField", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Field;", false);
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label6 = new Label();
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(38, label6);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitVarInsn(ASTORE, 4);
            Label label7 = new Label();
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLineNumber(40, label7);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitLdcInsn("dexElements");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "com/wangyz/plugins/util/ClassLoaderUtils", "getField", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Field;", false);
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label8 = new Label();
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLineNumber(41, label8);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitTypeInsn(CHECKCAST, "[Ljava/lang/Object;");
            methodVisitor.visitTypeInsn(CHECKCAST, "[Ljava/lang/Object;");
            methodVisitor.visitVarInsn(ASTORE, 6);
            Label label9 = new Label();
            methodVisitor.visitLabel(label9);
            methodVisitor.visitLineNumber(43, label9);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitVarInsn(ISTORE, 7);
            Label label10 = new Label();
            methodVisitor.visitLabel(label10);
            methodVisitor.visitLineNumber(44, label10);
            methodVisitor.visitTypeInsn(NEW, "java/util/ArrayList");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
            methodVisitor.visitVarInsn(ASTORE, 8);
            Label label11 = new Label();
            methodVisitor.visitLabel(label11);
            methodVisitor.visitLineNumber(45, label11);
            methodVisitor.visitVarInsn(ALOAD, 8);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
            methodVisitor.visitInsn(POP);
            Label label12 = new Label();
            methodVisitor.visitLabel(label12);
            methodVisitor.visitLineNumber(47, label12);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "iterator", "()Ljava/util/Iterator;", true);
            methodVisitor.visitVarInsn(ASTORE, 9);
            Label label13 = new Label();
            methodVisitor.visitLabel(label13);
            methodVisitor.visitFrame(Opcodes.F_FULL, 10, new Object[]{"android/content/Context", "java/util/List", "dalvik/system/PathClassLoader", "java/lang/reflect/Field", "java/lang/Object", "java/lang/reflect/Field", "[Ljava/lang/Object;", Opcodes.INTEGER, "java/util/List", "java/util/Iterator"}, 0, new Object[]{});
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
            Label label14 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label14);
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(CHECKCAST, "java/io/File");
            methodVisitor.visitVarInsn(ASTORE, 10);
            Label label15 = new Label();
            methodVisitor.visitLabel(label15);
            methodVisitor.visitLineNumber(49, label15);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitLdcInsn("odex");
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "android/content/Context", "getDir", "(Ljava/lang/String;I)Ljava/io/File;", false);
            methodVisitor.visitVarInsn(ASTORE, 11);
            Label label16 = new Label();
            methodVisitor.visitLabel(label16);
            methodVisitor.visitLineNumber(50, label16);
            methodVisitor.visitTypeInsn(NEW, "dalvik/system/DexClassLoader");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 10);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getAbsolutePath", "()Ljava/lang/String;", false);
            methodVisitor.visitVarInsn(ALOAD, 11);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getAbsolutePath", "()Ljava/lang/String;", false);
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "dalvik/system/DexClassLoader", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)V", false);
            methodVisitor.visitVarInsn(ASTORE, 12);
            Label label17 = new Label();
            methodVisitor.visitLabel(label17);
            methodVisitor.visitLineNumber(52, label17);
            methodVisitor.visitVarInsn(ALOAD, 12);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitLdcInsn("pathList");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "com/wangyz/plugins/util/ClassLoaderUtils", "getField", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Field;", false);
            methodVisitor.visitVarInsn(ASTORE, 13);
            Label label18 = new Label();
            methodVisitor.visitLabel(label18);
            methodVisitor.visitLineNumber(53, label18);
            methodVisitor.visitVarInsn(ALOAD, 13);
            methodVisitor.visitVarInsn(ALOAD, 12);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitVarInsn(ASTORE, 14);
            Label label19 = new Label();
            methodVisitor.visitLabel(label19);
            methodVisitor.visitLineNumber(55, label19);
            methodVisitor.visitVarInsn(ALOAD, 14);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitLdcInsn("dexElements");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "com/wangyz/plugins/util/ClassLoaderUtils", "getField", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Field;", false);
            methodVisitor.visitVarInsn(ASTORE, 15);
            Label label20 = new Label();
            methodVisitor.visitLabel(label20);
            methodVisitor.visitLineNumber(56, label20);
            methodVisitor.visitVarInsn(ALOAD, 15);
            methodVisitor.visitVarInsn(ALOAD, 14);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitTypeInsn(CHECKCAST, "[Ljava/lang/Object;");
            methodVisitor.visitTypeInsn(CHECKCAST, "[Ljava/lang/Object;");
            methodVisitor.visitVarInsn(ASTORE, 16);
            Label label21 = new Label();
            methodVisitor.visitLabel(label21);
            methodVisitor.visitLineNumber(58, label21);
            methodVisitor.visitVarInsn(ILOAD, 7);
            methodVisitor.visitVarInsn(ALOAD, 16);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitInsn(IADD);
            methodVisitor.visitVarInsn(ISTORE, 7);
            Label label22 = new Label();
            methodVisitor.visitLabel(label22);
            methodVisitor.visitLineNumber(59, label22);
            methodVisitor.visitVarInsn(ALOAD, 8);
            methodVisitor.visitVarInsn(ALOAD, 16);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
            methodVisitor.visitInsn(POP);
            Label label23 = new Label();
            methodVisitor.visitLabel(label23);
            methodVisitor.visitLineNumber(60, label23);
            methodVisitor.visitJumpInsn(GOTO, label13);
            methodVisitor.visitLabel(label14);
            methodVisitor.visitLineNumber(62, label14);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getComponentType", "()Ljava/lang/Class;", false);
            methodVisitor.visitVarInsn(ASTORE, 9);
            Label label24 = new Label();
            methodVisitor.visitLabel(label24);
            methodVisitor.visitLineNumber(63, label24);
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitVarInsn(ILOAD, 7);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/reflect/Array", "newInstance", "(Ljava/lang/Class;I)Ljava/lang/Object;", false);
            methodVisitor.visitVarInsn(ASTORE, 10);
            Label label25 = new Label();
            methodVisitor.visitLabel(label25);
            methodVisitor.visitLineNumber(65, label25);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 11);
            Label label26 = new Label();
            methodVisitor.visitLabel(label26);
            methodVisitor.visitLineNumber(66, label26);
            methodVisitor.visitVarInsn(ALOAD, 8);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "iterator", "()Ljava/util/Iterator;", true);
            methodVisitor.visitVarInsn(ASTORE, 12);
            Label label27 = new Label();
            methodVisitor.visitLabel(label27);
            methodVisitor.visitFrame(Opcodes.F_FULL, 13, new Object[]{"android/content/Context", "java/util/List", "dalvik/system/PathClassLoader", "java/lang/reflect/Field", "java/lang/Object", "java/lang/reflect/Field", "[Ljava/lang/Object;", Opcodes.INTEGER, "java/util/List", "java/lang/Class", "java/lang/Object", Opcodes.INTEGER, "java/util/Iterator"}, 0, new Object[]{});
            methodVisitor.visitVarInsn(ALOAD, 12);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
            Label label28 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label28);
            methodVisitor.visitVarInsn(ALOAD, 12);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(CHECKCAST, "[Ljava/lang/Object;");
            methodVisitor.visitVarInsn(ASTORE, 13);
            Label label29 = new Label();
            methodVisitor.visitLabel(label29);
            methodVisitor.visitLineNumber(67, label29);
            methodVisitor.visitVarInsn(ALOAD, 13);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ALOAD, 10);
            methodVisitor.visitVarInsn(ILOAD, 11);
            methodVisitor.visitVarInsn(ALOAD, 13);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
            Label label30 = new Label();
            methodVisitor.visitLabel(label30);
            methodVisitor.visitLineNumber(68, label30);
            methodVisitor.visitVarInsn(ILOAD, 11);
            methodVisitor.visitVarInsn(ALOAD, 13);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitInsn(IADD);
            methodVisitor.visitVarInsn(ISTORE, 11);
            Label label31 = new Label();
            methodVisitor.visitLabel(label31);
            methodVisitor.visitLineNumber(69, label31);
            methodVisitor.visitJumpInsn(GOTO, label27);
            methodVisitor.visitLabel(label28);
            methodVisitor.visitLineNumber(72, label28);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitVarInsn(ALOAD, 10);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "set", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(76, label1);
            Label label32 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label32);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(74, label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 2, new Object[]{"android/content/Context", "java/util/List"}, 1, new Object[]{"java/lang/Exception"});
            methodVisitor.visitVarInsn(ASTORE, 2);
            Label label33 = new Label();
            methodVisitor.visitLabel(label33);
            methodVisitor.visitLineNumber(75, label33);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "printStackTrace", "()V", false);
            methodVisitor.visitLabel(label32);
            methodVisitor.visitLineNumber(78, label32);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitInsn(RETURN);
            Label label34 = new Label();
            methodVisitor.visitLabel(label34);
            methodVisitor.visitLocalVariable("odex", "Ljava/io/File;", null, label16, label23, 11);
            methodVisitor.visitLocalVariable("dexClassLoader", "Ldalvik/system/DexClassLoader;", null, label17, label23, 12);
            methodVisitor.visitLocalVariable("pluginPathListField", "Ljava/lang/reflect/Field;", null, label18, label23, 13);
            methodVisitor.visitLocalVariable("pluginPathListObject", "Ljava/lang/Object;", null, label19, label23, 14);
            methodVisitor.visitLocalVariable("pluginDexElementsField", "Ljava/lang/reflect/Field;", null, label20, label23, 15);
            methodVisitor.visitLocalVariable("pluginDexElementsObject", "[Ljava/lang/Object;", null, label21, label23, 16);
            methodVisitor.visitLocalVariable("dex", "Ljava/io/File;", null, label15, label23, 10);
            methodVisitor.visitLocalVariable("objects", "[Ljava/lang/Object;", null, label29, label31, 13);
            methodVisitor.visitLocalVariable("pathClassLoader", "Ldalvik/system/PathClassLoader;", null, label5, label1, 2);
            methodVisitor.visitLocalVariable("pathListField", "Ljava/lang/reflect/Field;", null, label6, label1, 3);
            methodVisitor.visitLocalVariable("pathListObject", "Ljava/lang/Object;", null, label7, label1, 4);
            methodVisitor.visitLocalVariable("dexElementsField", "Ljava/lang/reflect/Field;", null, label8, label1, 5);
            methodVisitor.visitLocalVariable("dexElementsObject", "[Ljava/lang/Object;", null, label9, label1, 6);
            methodVisitor.visitLocalVariable("dexLen", "I", null, label10, label1, 7);
            methodVisitor.visitLocalVariable("dexElements", "Ljava/util/List;", "Ljava/util/List<[Ljava/lang/Object;>;", label11, label1, 8);
            methodVisitor.visitLocalVariable("elementClazz", "Ljava/lang/Class;", "Ljava/lang/Class<*>;", label24, label1, 9);
            methodVisitor.visitLocalVariable("newDexElements", "Ljava/lang/Object;", null, label25, label1, 10);
            methodVisitor.visitLocalVariable("copiedLen", "I", null, label26, label1, 11);
            methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label33, label32, 2);
            methodVisitor.visitLocalVariable("context", "Landroid/content/Context;", null, label3, label34, 0);
            methodVisitor.visitLocalVariable("dexPaths", "Ljava/util/List;", "Ljava/util/List<Ljava/io/File;>;", label3, label34, 1);
            methodVisitor.visitMaxs(6, 17);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC, "getField", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Field;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/NoSuchFieldException");
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(89, label3);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            Label label4 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label4);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(91, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", false);
            methodVisitor.visitVarInsn(ASTORE, 2);
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(92, label5);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "setAccessible", "(Z)V", false);
            Label label6 = new Label();
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(93, label6);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(94, label2);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/NoSuchFieldException"});
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label7 = new Label();
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLineNumber(95, label7);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getSuperclass", "()Ljava/lang/Class;", false);
            methodVisitor.visitVarInsn(ASTORE, 0);
            Label label8 = new Label();
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLineNumber(96, label8);
            methodVisitor.visitJumpInsn(GOTO, label3);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(98, label4);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitInsn(ARETURN);
            Label label9 = new Label();
            methodVisitor.visitLabel(label9);
            methodVisitor.visitLocalVariable("field", "Ljava/lang/reflect/Field;", null, label5, label2, 2);
            methodVisitor.visitLocalVariable("e", "Ljava/lang/NoSuchFieldException;", null, label7, label8, 3);
            methodVisitor.visitLocalVariable("clazz", "Ljava/lang/Class;", null, label3, label9, 0);
            methodVisitor.visitLocalVariable("fieldName", "Ljava/lang/String;", null, label3, label9, 1);
            methodVisitor.visitMaxs(2, 4);
            methodVisitor.visitEnd();
        }
        classWriter.visitEnd();

        return classWriter.toByteArray();
    }

    /**
     * 生成脱壳方法
     *
     * @param classWriter
     * @param application
     */
    public static void unShell(ClassWriter classWriter, String application) {
        MethodVisitor mv = classWriter.visitMethod(ACC_PRIVATE, "unShell", "()V", null, null);
        mv.visitCode();
        Label l0 = new Label();
        Label l1 = new Label();
        Label l2 = new Label();
        mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Exception");
        mv.visitLabel(l0);
        mv.visitLineNumber(28, l0);
        mv.visitTypeInsn(NEW, "java/io/File");
        mv.visitInsn(DUP);
        mv.visitVarInsn(ALOAD, 0);
        mv.visitMethodInsn(INVOKEVIRTUAL, application, "getApplicationInfo", "()Landroid/content/pm/ApplicationInfo;", false);
        mv.visitFieldInsn(GETFIELD, "android/content/pm/ApplicationInfo", "sourceDir", "Ljava/lang/String;");
        mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;)V", false);
        mv.visitVarInsn(ASTORE, 1);
        Label l3 = new Label();
        mv.visitLabel(l3);
        mv.visitLineNumber(30, l3);
        mv.visitVarInsn(ALOAD, 0);
        mv.visitLdcInsn("apk");
        mv.visitInsn(ICONST_0);
        mv.visitMethodInsn(INVOKEVIRTUAL, application, "getDir", "(Ljava/lang/String;I)Ljava/io/File;", false);
        mv.visitVarInsn(ASTORE, 2);
        Label l4 = new Label();
        mv.visitLabel(l4);
        mv.visitLineNumber(31, l4);
        mv.visitTypeInsn(NEW, "java/io/File");
        mv.visitInsn(DUP);
        mv.visitVarInsn(ALOAD, 2);
        mv.visitLdcInsn("unzip");
        mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/io/File;Ljava/lang/String;)V", false);
        mv.visitVarInsn(ASTORE, 2);
        Label l5 = new Label();
        mv.visitLabel(l5);
        mv.visitLineNumber(33, l5);
        mv.visitVarInsn(ALOAD, 2);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "exists", "()Z", false);
        Label l6 = new Label();
        mv.visitJumpInsn(IFNE, l6);
        Label l7 = new Label();
        mv.visitLabel(l7);
        mv.visitLineNumber(34, l7);
        mv.visitVarInsn(ALOAD, 2);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "mkdirs", "()Z", false);
        mv.visitInsn(POP);
        Label l8 = new Label();
        mv.visitLabel(l8);
        mv.visitLineNumber(36, l8);
        mv.visitVarInsn(ALOAD, 1);
        mv.visitVarInsn(ALOAD, 2);
        mv.visitMethodInsn(INVOKESTATIC, "com/wangyz/plugins/util/ZipUtils", "unZip", "(Ljava/io/File;Ljava/io/File;)V", false);
        Label l9 = new Label();
        mv.visitLabel(l9);
        mv.visitLineNumber(38, l9);
        mv.visitVarInsn(ALOAD, 2);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "listFiles", "()[Ljava/io/File;", false);
        mv.visitVarInsn(ASTORE, 3);
        Label l10 = new Label();
        mv.visitLabel(l10);
        mv.visitLineNumber(40, l10);
        mv.visitTypeInsn(NEW, "java/io/File");
        mv.visitInsn(DUP);
        mv.visitVarInsn(ALOAD, 2);
        mv.visitLdcInsn("decrypt");
        mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/io/File;Ljava/lang/String;)V", false);
        mv.visitVarInsn(ASTORE, 4);
        Label l11 = new Label();
        mv.visitLabel(l11);
        mv.visitLineNumber(41, l11);
        mv.visitVarInsn(ALOAD, 4);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "mkdirs", "()Z", false);
        mv.visitInsn(POP);
        Label l12 = new Label();
        mv.visitLabel(l12);
        mv.visitLineNumber(42, l12);
        mv.visitTypeInsn(NEW, "java/util/ArrayList");
        mv.visitInsn(DUP);
        mv.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
        mv.visitVarInsn(ASTORE, 5);
        Label l13 = new Label();
        mv.visitLabel(l13);
        mv.visitLineNumber(43, l13);
        mv.visitVarInsn(ALOAD, 3);
        mv.visitVarInsn(ASTORE, 6);
        mv.visitVarInsn(ALOAD, 6);
        mv.visitInsn(ARRAYLENGTH);
        mv.visitVarInsn(ISTORE, 7);
        mv.visitInsn(ICONST_0);
        mv.visitVarInsn(ISTORE, 8);
        Label l14 = new Label();
        mv.visitLabel(l14);
        mv.visitFrame(Opcodes.F_FULL, 9, new Object[]{application, "java/io/File", "java/io/File", "[Ljava/io/File;", "java/io/File", "java/util/ArrayList", "[Ljava/io/File;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[]{});
        mv.visitVarInsn(ILOAD, 8);
        mv.visitVarInsn(ILOAD, 7);
        Label l15 = new Label();
        mv.visitJumpInsn(IF_ICMPGE, l15);
        mv.visitVarInsn(ALOAD, 6);
        mv.visitVarInsn(ILOAD, 8);
        mv.visitInsn(AALOAD);
        mv.visitVarInsn(ASTORE, 9);
        Label l16 = new Label();
        mv.visitLabel(l16);
        mv.visitLineNumber(44, l16);
        mv.visitVarInsn(ALOAD, 9);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getName", "()Ljava/lang/String;", false);
        mv.visitLdcInsn(".dex");
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
        Label l17 = new Label();
        mv.visitJumpInsn(IFNE, l17);
        Label l18 = new Label();
        mv.visitLabel(l18);
        mv.visitLineNumber(45, l18);
        Label l19 = new Label();
        mv.visitJumpInsn(GOTO, l19);
        mv.visitLabel(l17);
        mv.visitLineNumber(47, l17);
        mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/io/File"}, 0, null);
        mv.visitVarInsn(ALOAD, 9);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getName", "()Ljava/lang/String;", false);
        mv.visitLdcInsn("classes.dex");
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
        Label l20 = new Label();
        mv.visitJumpInsn(IFEQ, l20);
        Label l21 = new Label();
        mv.visitLabel(l21);
        mv.visitLineNumber(48, l21);
        mv.visitVarInsn(ALOAD, 5);
        mv.visitVarInsn(ALOAD, 9);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "add", "(Ljava/lang/Object;)Z", false);
        mv.visitInsn(POP);
        mv.visitJumpInsn(GOTO, l19);
        mv.visitLabel(l20);
        mv.visitLineNumber(50, l20);
        mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        mv.visitTypeInsn(NEW, "java/io/File");
        mv.visitInsn(DUP);
        mv.visitVarInsn(ALOAD, 4);
        mv.visitVarInsn(ALOAD, 9);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getName", "()Ljava/lang/String;", false);
        mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/io/File;Ljava/lang/String;)V", false);
        mv.visitVarInsn(ASTORE, 10);
        Label l22 = new Label();
        mv.visitLabel(l22);
        mv.visitLineNumber(51, l22);
        mv.visitVarInsn(ALOAD, 9);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getAbsolutePath", "()Ljava/lang/String;", false);
        mv.visitVarInsn(ALOAD, 10);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getAbsolutePath", "()Ljava/lang/String;", false);
        mv.visitMethodInsn(INVOKESTATIC, "com/wangyz/plugins/util/EncryptUtils", "decrypt", "(Ljava/lang/String;Ljava/lang/String;)Z", false);
        mv.visitInsn(POP);
        Label l23 = new Label();
        mv.visitLabel(l23);
        mv.visitLineNumber(53, l23);
        mv.visitVarInsn(ALOAD, 5);
        mv.visitVarInsn(ALOAD, 10);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "add", "(Ljava/lang/Object;)Z", false);
        mv.visitInsn(POP);
        Label l24 = new Label();
        mv.visitLabel(l24);
        mv.visitLineNumber(55, l24);
        mv.visitVarInsn(ALOAD, 9);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "delete", "()Z", false);
        mv.visitInsn(POP);
        mv.visitLabel(l19);
        mv.visitLineNumber(43, l19);
        mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
        mv.visitIincInsn(8, 1);
        mv.visitJumpInsn(GOTO, l14);
        mv.visitLabel(l15);
        mv.visitLineNumber(59, l15);
        mv.visitFrame(Opcodes.F_CHOP, 3, null, 0, null);
        mv.visitVarInsn(ALOAD, 0);
        mv.visitVarInsn(ALOAD, 5);
        mv.visitMethodInsn(INVOKESTATIC, "com/wangyz/plugins/util/ClassLoaderUtils", "loadDex", "(Landroid/content/Context;Ljava/util/List;)V", false);
        Label l25 = new Label();
        mv.visitLabel(l25);
        mv.visitLineNumber(60, l25);
        mv.visitJumpInsn(GOTO, l1);
        mv.visitLabel(l6);
        mv.visitLineNumber(61, l6);
        mv.visitFrame(Opcodes.F_CHOP, 3, null, 0, null);
        mv.visitTypeInsn(NEW, "java/util/ArrayList");
        mv.visitInsn(DUP);
        mv.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
        mv.visitVarInsn(ASTORE, 3);
        Label l26 = new Label();
        mv.visitLabel(l26);
        mv.visitLineNumber(62, l26);
        mv.visitVarInsn(ALOAD, 3);
        mv.visitTypeInsn(NEW, "java/io/File");
        mv.visitInsn(DUP);
        mv.visitVarInsn(ALOAD, 2);
        mv.visitLdcInsn("classes.dex");
        mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/io/File;Ljava/lang/String;)V", false);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "add", "(Ljava/lang/Object;)Z", false);
        mv.visitInsn(POP);
        Label l27 = new Label();
        mv.visitLabel(l27);
        mv.visitLineNumber(63, l27);
        mv.visitTypeInsn(NEW, "java/io/File");
        mv.visitInsn(DUP);
        mv.visitVarInsn(ALOAD, 2);
        mv.visitLdcInsn("decrypt");
        mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/io/File;Ljava/lang/String;)V", false);
        mv.visitVarInsn(ASTORE, 4);
        Label l28 = new Label();
        mv.visitLabel(l28);
        mv.visitLineNumber(64, l28);
        mv.visitVarInsn(ALOAD, 4);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "listFiles", "()[Ljava/io/File;", false);
        mv.visitVarInsn(ASTORE, 5);
        Label l29 = new Label();
        mv.visitLabel(l29);
        mv.visitLineNumber(65, l29);
        mv.visitVarInsn(ALOAD, 5);
        mv.visitVarInsn(ASTORE, 6);
        mv.visitVarInsn(ALOAD, 6);
        mv.visitInsn(ARRAYLENGTH);
        mv.visitVarInsn(ISTORE, 7);
        mv.visitInsn(ICONST_0);
        mv.visitVarInsn(ISTORE, 8);
        Label l30 = new Label();
        mv.visitLabel(l30);
        mv.visitFrame(Opcodes.F_FULL, 9, new Object[]{application, "java/io/File", "java/io/File", "java/util/ArrayList", "java/io/File", "[Ljava/io/File;", "[Ljava/io/File;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[]{});
        mv.visitVarInsn(ILOAD, 8);
        mv.visitVarInsn(ILOAD, 7);
        Label l31 = new Label();
        mv.visitJumpInsn(IF_ICMPGE, l31);
        mv.visitVarInsn(ALOAD, 6);
        mv.visitVarInsn(ILOAD, 8);
        mv.visitInsn(AALOAD);
        mv.visitVarInsn(ASTORE, 9);
        Label l32 = new Label();
        mv.visitLabel(l32);
        mv.visitLineNumber(66, l32);
        mv.visitVarInsn(ALOAD, 3);
        mv.visitVarInsn(ALOAD, 9);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "add", "(Ljava/lang/Object;)Z", false);
        mv.visitInsn(POP);
        Label l33 = new Label();
        mv.visitLabel(l33);
        mv.visitLineNumber(65, l33);
        mv.visitIincInsn(8, 1);
        mv.visitJumpInsn(GOTO, l30);
        mv.visitLabel(l31);
        mv.visitLineNumber(69, l31);
        mv.visitFrame(Opcodes.F_CHOP, 3, null, 0, null);
        mv.visitVarInsn(ALOAD, 0);
        mv.visitVarInsn(ALOAD, 3);
        mv.visitMethodInsn(INVOKESTATIC, "com/wangyz/plugins/util/ClassLoaderUtils", "loadDex", "(Landroid/content/Context;Ljava/util/List;)V", false);
        mv.visitLabel(l1);
        mv.visitLineNumber(73, l1);
        mv.visitFrame(Opcodes.F_FULL, 1, new Object[]{application}, 0, new Object[]{});
        Label l34 = new Label();
        mv.visitJumpInsn(GOTO, l34);
        mv.visitLabel(l2);
        mv.visitLineNumber(71, l2);
        mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Exception"});
        mv.visitVarInsn(ASTORE, 1);
        Label l35 = new Label();
        mv.visitLabel(l35);
        mv.visitLineNumber(72, l35);
        mv.visitVarInsn(ALOAD, 1);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "printStackTrace", "()V", false);
        mv.visitLabel(l34);
        mv.visitLineNumber(74, l34);
        mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        mv.visitInsn(RETURN);
        Label l36 = new Label();
        mv.visitLabel(l36);
        mv.visitLocalVariable("decryptFile", "Ljava/io/File;", null, l22, l19, 10);
        mv.visitLocalVariable("file", "Ljava/io/File;", null, l16, l19, 9);
        mv.visitLocalVariable("files", "[Ljava/io/File;", null, l10, l25, 3);
        mv.visitLocalVariable("decryptDir", "Ljava/io/File;", null, l11, l25, 4);
        mv.visitLocalVariable("list", "Ljava/util/ArrayList;", "Ljava/util/ArrayList<Ljava/io/File;>;", l13, l25, 5);
        mv.visitLocalVariable("file", "Ljava/io/File;", null, l32, l33, 9);
        mv.visitLocalVariable("list", "Ljava/util/ArrayList;", "Ljava/util/ArrayList<Ljava/io/File;>;", l26, l1, 3);
        mv.visitLocalVariable("decryptDir", "Ljava/io/File;", null, l28, l1, 4);
        mv.visitLocalVariable("files", "[Ljava/io/File;", null, l29, l1, 5);
        mv.visitLocalVariable("apkFile", "Ljava/io/File;", null, l3, l1, 1);
        mv.visitLocalVariable("apkUnzipDir", "Ljava/io/File;", null, l4, l1, 2);
        mv.visitLocalVariable("e", "Ljava/lang/Exception;", null, l35, l34, 1);
        mv.visitLocalVariable("this", "Lcom/wangyz/shell/ShellApplication;", null, l0, l36, 0);
        mv.visitMaxs(5, 11);
        mv.visitEnd();
    }
}
